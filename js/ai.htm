<!DOCTYP E html >
<html>
<head>
    <title>Neural Network Trainer</title>
    <script type="text/javascript" src="AI.js" ></script>
    <script type="text/javascript" src="ui.js" ></script>
    <script type="text/javascript" src="GeneticAlgorithm.js"></script>
    <script type="text/javascript" src="FeedForward.js"></script>
    
    <link rel="stylesheet" href="ai.css" />
    <style type="text/css">
        #btnImport
        {
            height: 20px;
            width: 65px;
        }
    </style>
</head>
<body>
    <div id="wrapper">
        <div id="networkConfig">
            <div id="imagePane">
                <div id="networkResults">
                    <span><b>Network Performance:</b></span>
                    <div id="pKey">
                        <canvas id="nnCanvas" ondblclick="nnToImg(this)"></canvas>
                        <input type="button" value="<--Prev" onclick="evaluateChromosone(-1)" /><input
                            type="button" value="Next->" onclick="evaluateChromosone(+1)" />
                    </div>
                    <input type="input" id="tbManualTest" />
                    <div>
                        <span style="text-align: right">
                            <input type="button" id="btnManualTest" onclick="manualTest()" value="Manual Test" />
                            <br />
                            <input type="checkbox" onclick="evaluateChromosone(0,this.checked)" checked="checked" />
                            image
                            <input type="checkbox" onclick="toggleLog(0,this.checked)" />
                            log </span>
                        <div id="status" style="border-style: groove">
                        </div>
                        Max Epochs:<input type="text" id="tbMaxEpochs" onkeyup="maxEpochs=this.value" value="100000" />
                        <input type="hidden" id="tbEpoch" />
                        <br />
                        <input type="submit" id="btnTrain" value="Train" />
                        <input type="button" id="btnPause" onclick="Network.pause()" value="Pause" />
                        <input type="button" id="btnEnd" onclick="end()" value="End" /><br />
                        <textarea id="taNetImport"  rows="6" ></textarea>
                        <br />
                       
                        <input type="button" id="btnImport" onclick="_UI.importNetwork(document.getElementById('taNetImport').value)" value="Open" /><br />Name: <input type="text" id="tbNetName" value="" />
                        <input type="button" id="btnExport" onclick="Network.Lib.initNetExport(true, true); " value="Save" /><br />
                        <select id="sbSavedNetworks" title="Saved Networks" size="1" style="width:175px" onkeyup="myApp.UI.restoreSavedNetwork(this.value)" onchange="_UI.restoreSavedNetwork(this.value)"></select>
                        <input type="button" id="btnDelete" onclick="_UI.removeStorageKey(document.getElementById('sbSavedNetworks').value);" value="Delete" /><br />
                       <input type="button" id="btnClearStorage" onclick="localStorage.clear();" value="Clear Storage" /><br />
                       
                        <a id="exportNet" onclick="" title="Click to view xml, right-click to save link as." href="#" ></a>
                           <!--   <input type="button" id="btnMode" onclick="random = random ? false : true" value="Mode" />-->
                    </div>
                    <div id="configOptions">
                    
                        Options: 
                        r<input id="tbResponse" onblur="NN.setResponse(this.value);" type="text" style="width: 21px" /> bits Sigfigs</div>
                        weight factor<input id="tbWeightFactor" onblur="NN.setWeightFactor(this.value);" type="text" style="width: 21px" /> bits Sigfigs</div>
                </div>
                <div id="resultsOutput" style="border: 4px groove;">
                    
                    <div id="networkResultTitle">
                    </div>
                    <div id="setResults">
                    </div>
                    <span id="imagePaneTitle">Neural Network Visualizer</span><br />
                    <br />
                    <img id="nnImg" draggable="true" ondragenter="dragEnterHandler(event)" ondragover="dragOverHandler(event)"
                        ondrop="dropHandler(event)" ondragstart="dragStartHandler(event)" />
                    <br />
                </div>
            </div>
            <!-- end imagePane-->
           
            <form action="javascript: _NN.main(true)">
            <span style="display: block; text-align: center; font-weight: bold">Network Configuration:</span>
            <input id="tbnInputs" onkeyup="" type="text" value="3" />
            Input(s)<br />
            <input id="tbnInputNeurons" onkeyup="" type="text" value="4" />
            # Input Layer Neurons
            <br />
            <br />
            <input type="text" id="tbnHiddenLayers" onkeyup="" value="0" />
            Hidden layers
            <br />
            <input type="text" id="tbnNeuronsPerHiddenLayer" onkeyup="" value="0" />
            Neurons per layer<br />
            <input id="tbnOutputs" onkeyup="target = this.value" type="text" value="4" />Outputs(s)<br />
            <input id="tbChromosone" type="hidden" />           
            <br />
            </form>
           
            <!--/ TODO: XML -->
             <span id="nSets"></span>
             <a href="javascript:_UI.addSet();">Add training set</a><br />
            <div id="trainingSets" class="sets">
                <br />
            <trainingset></trainingset>
            </div>
<span style="display:block;background:blue; border: 1px solid black; font-weight: bold;color: lightgray">LOG</span><div id="log">
    </div>
                   
        </div>
    
    <!-- end wrapper -->
   
    </div>
    
    <script type="text/javascript">


        function autoEval() {

            // Get inputs
            var args = [];
            args[0] = {};

            // Current input state.
            args[0].inputs = [.3, .1, .4];

            // Desired output state.
            args[0].outputs = [.5, .5, .5, .5];
            
            // Auto Evauate inputs.
            myAI.AutoEvaluate(args, rank);

        }

        function rank(results) {

            results.forEach(function (key, value) {

                alert(value);

            });

            // Repeat if not finished.
            myAI.Evolve();

            setTimeout(autoEval, 1);
            // else
            // export network.
        }

        function manualEval() {

            // OR manual assessment.

            // loop...       
            // eval
            // myAI.setChromosoneFitness(fs);
            // myAI.nextChromosone(); //autoevolve
           
        
        
        }


        window.onload = function () {

            // Build new network.
           // var args = [3, 4, 1, 4, 4];
            // o o o o
            // h h h h
            // n n n n 
            // [] [] []
            // myAI = new AI(args);
            // autoEval();
            myAI = new AI();
        }        
    </script>
</body>
</html>