<!DOCTYP E html >
<html>
<head>
    <title>Neural Network Trainer</title>
    <script type="text/javascript" src="AI.js" ></script>
    <script type="text/javascript" src="ui.js" ></script>
    <script type="text/javascript" src="GeneticAlgorithm.js"></script>
    <script type="text/javascript" src="FeedForward.js"></script>
    
    <link rel="stylesheet" href="ai.css" />
    <style type="text/css">
        #btnImport
        {
            height: 20px;
            width: 65px;
        }
    </style>
</head>
<body>
    <div id="wrapper">
        <div id="networkConfig">
        <div id="log">
    </div>

            <div id="imagePane">
                <div id="networkResults">
                    <span><b>Network Performance:</b></span>
                    <div id="pKey">
                        <canvas id="nnCanvas" ondblclick="nnToImg(this)"></canvas>
                        <input type="button" value="<--Prev" onclick="evaluateChromosone(-1)" /><input
                            type="button" value="Next->" onclick="evaluateChromosone(+1)" />
                    </div>
                    <input type="input" id="tbManualTest" />
                    <div>
                        <span style="text-align: right">
                            <input type="button" id="btnManualTest" onclick="manualTest()" value="Manual Test" />
                            <br />
                            <input type="checkbox" onclick="evaluateChromosone(0,this.checked)" checked="checked" />
                            image
                            <input type="checkbox" onclick="toggleLog(0,this.checked)" />
                            log 
                            <input id="cbTrain" type="checkbox" onclick="" checked />
                            train </span>
                            
                            
                        <div id="status" style="border-style: groove">
                        </div>
                        Max Epochs:<input type="text" id="tbMaxEpochs" onkeyup="maxEpochs=this.value" value="100000" />
                        <input type="hidden" id="tbEpoch" />
                        <br />
                        <input type="submit" id="btnTrain" value="Train" />
                        <input type="button" id="btnPause" onclick="Network.pause()" value="Pause" />
                        <input type="button" id="btnEnd" onclick="end()" value="End" /><br />
                        <textarea id="taNetImport"  rows="6" ></textarea>
                        <br />
                       
                        <input type="button" id="btnImport" onclick="_UI.importNetwork(document.getElementById('taNetImport').value)" value="Open" /><br />Name: <input type="text" id="tbNetName" value="" />
                        <input type="button" id="btnExport" onclick="Network.Lib.initNetExport(true, true); " value="Save" /><br />
                        <select id="sbSavedNetworks" title="Saved Networks" size="1" style="width:175px" onkeyup="myApp.UI.restoreSavedNetwork(this.value)" onchange="_UI.restoreSavedNetwork(this.value)"></select>
                        <input type="button" id="btnDelete" onclick="_UI.removeStorageKey(document.getElementById('sbSavedNetworks').value);" value="Delete" /><br />
                       <input type="button" id="btnClearStorage" onclick="localStorage.clear();" value="Clear Storage" /><br />
                       
                        <a id="exportNet" onclick="" title="Click to view xml, right-click to save link as." href="#" ></a>
                           <!--   <input type="button" id="btnMode" onclick="random = random ? false : true" value="Mode" />-->
                    </div>
                    <div id="configOptions">
                    
                        Options: 
                        r<input id="tbResponse" onblur="NN.setResponse(this.value);" type="text" style="width: 21px" /> bits Sigfigs</div>
                        weight factor<input id="tbWeightFactor" onblur="NN.setWeightFactor(this.value);" type="text" style="width: 21px" /> bits Sigfigs</div>
                </div>
                <div id="resultsOutput" style="border: 4px groove;">
                    
                    <div id="networkResultTitle">
                    </div>
                    <div id="setResults">
                    </div>
                    <span id="imagePaneTitle">Neural Network Visualizer</span><br />
                    <br />
                    <img id="nnImg" draggable="true" ondragenter="dragEnterHandler(event)" ondragover="dragOverHandler(event)"
                        ondrop="dropHandler(event)" ondragstart="dragStartHandler(event)" />
                    <br />
                </div>
            </div>
            <!-- end imagePane-->
           
            <form action="javascript: _NN.main(true)">
            <span style="display: block; text-align: center; font-weight: bold">Network Configuration:</span>
            <input id="tbnInputs" onkeyup="" type="text" value="3" />
            Input(s)<br />
            <input id="tbnInputNeurons" onkeyup="" type="text" value="4" />
            # Input Layer Neurons
            <br />
            <br />
            <input type="text" id="tbnHiddenLayers" onkeyup="" value="0" />
            Hidden layers
            <br />
            <input type="text" id="tbnNeuronsPerHiddenLayer" onkeyup="" value="0" />
            Neurons per layer<br />
            <input id="tbnOutputs" onkeyup="target = this.value" type="text" value="4" />Outputs(s)<br />
            <input id="tbChromosone" type="hidden" />           
            <br />
            </form>
           
            <!--/ TODO: XML -->
             <span id="nSets"></span>
             <a href="javascript:_UI.addSet();">Add training set</a><br />
            <div id="trainingSets" class="sets">
                <br />
            <trainingset></trainingset>
            </div>
<span style="display:block;background:blue; border: 1px solid black; font-weight: bold;color: lightgray">LOG</span>
                   
        </div>
    
    <!-- end wrapper -->
   
    </div>
    
    <script type="text/javascript">


        function autoEval() {

            // Get inputs
            var args = [];
            args[0] = {};

            // Current input state.
            args[0].inputs = [.3, .1, .4];

            // Desired output state.
            args[0].outputs = [.5, .5, .5, .5];
            
            // Auto Evauate inputs.
            myAI.AutoEvaluate(args, manualCallback);

        }
        
        function manualEval() {

            var process = myProcess;
            // Suspend timer.
            clearInterval(trainingTimer);
            // Get desired.
            count++;
            var fs = 0;

           // Try this chromosone i times.
            for (var i = 0; i < 1; i++) {
           

           // Get theta and distance
            var targetVars = process.getVars();
            
            // Apply state to net and get new process inputs.
            var results = myAI.DynamicEvaluate(targetVars);
                        
            // Apply new process inputs.
            process.setInputs(results);

                // Get new theta and distance process vars.
                var newVars = process.getVars();

                var delta = 0;
                //distance /theta
                delta += Math.abs(targetVars[0] - Math.abs( targetVars[0] +newVars[0] )) ;
                delta += Math.abs(targetVars[1] - newVars[1]) ;
                   
                    //LMS
                    delta *= delta;
                    fs += delta;
                    delta = 0;

            }
            // Set fitness.
            myAI.setFitness(fs);
            document.getElementById('log').innerHTML += '<br />Fitness: ' + fs;
            document.getElementById('log').innerHTML += '<br />Count: ' + count;
              


            // if not done
            if (fs > .2) {

                // Walk through pool and automatically evolve.
                myAI.incChromosoneIndex();  // myAI.nextChromosone(); //autoevolve
                trainingTimer = setInterval(manualEval, 100);
            }
            else {
                // Found good chromosone.
                myAI.chromosoneIndex = 0;
                trainingTimer = setInterval(manualEval, 100);
            
            
            }
        
        }
        function manualCallback(results) {

            results.forEach(function (key, value) {

                alert(value);

            });

            // Repeat if not finished.
            myAI.Evolve();

            setTimeout(autoEval, 1);
            // else
            // export network.
        }


        Process = function () {

            var target = {};
            target.distance = 0;

            var leftTrack = 0;
            var rightTrack = 0;
            var vehicle = {};
            vehicle.heading = 0;
            vehicle.x = 0;
            vehicle.y = 0;

            this.setInputs = function (values) {

                leftTrack = values[0];
                rightTrack = values[1];
                //alert('left: ' + leftTrack + ' right:' + rightTrack);
                this.move();
                // document.getElementById('log').innerHTML = ('Distance: ' + target.distance + '<br />Rotation: ' + target.heading);
            }

            this.getVars = function () {


                var retval = new Array();


                retval.push(slopeMC(target.distance, 0, 500));

                retval.push(slopeMC(((vehicle.heading - target.heading)), -2*Math.PI, 2*Math.PI));

                document.getElementById('log').innerHTML += ('<br />distance var : ' + retval[0].toFixed(2) + '<br />Rotation var: ' + retval[1].toFixed(2)) + '<br />target theta: ' + target.heading;

                return retval;

            }


            this.compass = function (dX, dY) {

                var heading = 0;
                var quad = Math.PI / 2;

                heading += Math.abs(Math.atan(dX / dY));
                if (dX >= 0 & dY >= 0) return Math.abs(heading);
                if (dX >= 0 & dY <= 0) return (heading + quad);
                if (dX <= 0 & dY <= 0) return (heading + 2 * quad);
                if (dX <= 0 & dY >= 0) return (heading + 3 * quad);
            }

            this.move = function () {


                var left = slopeMC(leftTrack, 0, 1, -1, 1)
                var right = slopeMC(rightTrack, 0, 1, -1, 1)

                var speed = (left + right) / 2; // Math.sqrt(Math.pow(leftTrack, 2) + Math.pow(rightTrack, 2));

                var oldX = vehicle.x;
                var oldY = vehicle.y;

                // Radians of rotation.
                var rotateBy = Math.atan(left / right);

                // Calculate vector. 
                var dX = Math.sin(left / right); // * rotateBy; // rotateBy; // Math.sin(rotateBy); //* speed;
                var dY = Math.cos(left / right); //  left - right * rotateBy; //  Math.cos(rotateBy); //* speed;
                document.getElementById('status').innerHTML = 'dX: ' + dX.toFixed(2) + ' dY: ' + dY.toFixed(2) + ' h: ' + (this.compass(dX, dY) / (2 * Math.PI) * 360).toFixed(1);



                vehicle.x += dX; // (dX + speed * Math.asin(vehicle.heading));
                vehicle.y += dY; // (dY + speed * Math.acos(vehicle.heading));

                vehicle.heading = this.compass(vehicle.x - oldX, vehicle.y - oldY); //+= rotateBy;

                vehicle.x += speed*10 * Math.sin(vehicle.heading);
                vehicle.y += speed*10 * Math.cos(vehicle.heading);


                if (vehicle.x > 250) vehicle.x = -250;
                if (vehicle.x < -250) vehicle.x = 250;

                if (vehicle.y > 250) vehicle.y = -250;
                if (vehicle.y < -250) vehicle.y = 250;


                grid.drawvehicleXY(vehicle.x, vehicle.y);


                target.heading = this.compass(target.x - vehicle.x, target.y - vehicle.y); // vehicle.heading - target.heading;
                target.distance = Math.sqrt(Math.pow(vehicle.x - target.x, 2) + Math.pow(vehicle.y - target.y, 2));


                document.getElementById('log').innerHTML = '<br />Target heading: ' + target.heading + '<br />Distance: ' + target.distance;
                document.getElementById('log').innerHTML += '<br />vehicle heading: ' + vehicle.heading;
                document.getElementById('log').innerHTML += '<br />Rotate by: ' + rotateBy;
                document.getElementById('log').innerHTML += '<br />Left track: ' + leftTrack + '<br />Right track: ' + rightTrack;
                document.getElementById('log').innerHTML += '<br />X: ' + vehicle.x + '<br />Y: ' + vehicle.y;
                document.getElementById('log').innerHTML += '<br />target X: ' + target.x + '<br />target Y: ' + target.y;


            }


            this.grid = function (elName) {

                var grid = document.getElementById(elName);
                var vehicle = document.getElementById('obj');

                var width = grid.offsetWidth;
                var height = grid.offsetHeight;
                var offsetX = (width / 2);
                var offsetY = (height / 2);
                this.targets = [];

                this.newTarget = function (elName) {

                    var el = document.getElementById(elName);

                    var drawTargetXY = function (x1, y1) {

                        // Polar coordinates.
                        el.style.left = x1 + offsetX + 'px';
                        el.style.top = -y1 + offsetY + 'px';
                        //el.innerHTML = '(' + (x).toFixed(2) + ',' + (y).toFixed(2) + ')';

                    }


                    // Define a pseudo target
                    this.x = Math.random() * width - offsetX;
                    this.y = Math.random() * height - offsetY;

                    drawTargetXY(this.x, this.y);

                    this.targets.push(this);
                }


                this.drawvehicleXY = function (x1, y1) {

                    // Polar coordinates.
                    vehicle.style.left = x1 + offsetX + 'px';
                    vehicle.style.top = -y1 + offsetY + 'px';
                    //el.innerHTML = '(' + (x).toFixed(2) + ',' + (y).toFixed(2) + ')';

                }


                return this;
            }

            // init grid and target(s).
            grid = new this.grid('grid');
            grid.newTarget('target');
            target.x = grid.targets[0].x;
            target.y = grid.targets[0].y;
            target.heading = 0; // this.compass(target.x - vehicle.x, target.y - vehicle.y);
            target.distance = 0;

        }



        var trainingTimer;
        window.onload = function () {

            // Build new network.
            // TODO: Dynamic defaults based on process vars (# inputs/outputs)
            var args = [2, 4, 0, 0, 2];
            // o o o o
            // h h h h
            // n n n n 
            // [] [] []
            count = 0;
           
            myAI = new AI(args);
            //autoEval();
            
            myProcess = new Process;

            //trainingTimer = setInterval(manualEval(myProcess), 1);
            manualEval(myProcess);
            //myAI = new AI();
        }        
    </script>
    <div id='grid' style="position:absolute;top:0px;left:400px;border:1px solid black; width:500px; height:500px;">
<div id="obj" style="position:relative">*</div>
<div id="target" style="position: relative">X</div>
</div>
</body>
</html>